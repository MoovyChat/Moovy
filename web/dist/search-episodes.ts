import{e as P,r as o,u as S,a6 as N,a as t,j as c,C as M}from"./index.js";import $ from"./emptyPage.ts";import{H as x}from"./Helmet.ts";import{I as b}from"./image.ts";import C from"./loading.ts";import{M as H}from"./movieCard.styles.ts";import{M as I}from"./movieInfo.ts";import{S as R}from"./searchResults.styles.ts";import"./styled-components.browser.esm.ts";import"./CSSTransition.ts";import"./inheritsLoose.ts";import"./moovy-white.ts";import"./loading.styles.ts";import"./index.esm.ts";import"./iconBase.ts";import"./helpers.ts";import"./hooks.ts";const J=()=>{const{search:r}=P();o.useRef(null),o.useRef(null);const d=S(),[p,f]=o.useState(1),[g,h]=o.useState(1),[m,u]=o.useState([]),[{data:i,error:n,fetching:l}]=N({variables:{search:r,page:p,limit:10}});o.useMemo(()=>{if(n&&console.log(n),i&&!l){const s=i.searchEpisodes,e=s==null?void 0:s.lastPage;e&&h(()=>e);const a=s==null?void 0:s.movies;a&&u(()=>a)}},[i,l,n,r]);const E=s=>{s.stopPropagation();const e=s.target;e.scrollHeight-e.scrollTop-2<=e.clientHeight&&p!==g&&f(a=>a+1)};return l?t(C,{}):m.length<=0?t($,{msg:"No Episodes found"}):c(R,{onScroll:E,children:[c(x,{children:[t("title",{children:`${r}: Episodes`}),t("meta",{name:"description",content:`${r}: Episodes`}),t("link",{rel:"canonical",href:`${M}/search/${r}/episodes}`})]}),m.map(s=>t(H,{bg:s==null?void 0:s.stills,onClick:e=>{e.stopPropagation(),location.pathname!==`/movie/${s.id}`&&d(`/movie/${s.id}`)},children:c("div",{className:"container",children:[t("div",{className:"thumbs",children:t(b,{src:s==null?void 0:s.thumbs,alt:"movie"})}),t("div",{className:"info",children:t(I,{movie:s})})]})}))]})};export{J as default};
