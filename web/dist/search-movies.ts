import{e as S,r,u as N,a7 as v,a as e,j as c,C as x}from"./index.js";import $ from"./emptyPage.ts";import{H as R}from"./Helmet.ts";import{I as b}from"./image.ts";import C from"./loading.ts";import{M as E}from"./movieCard.styles.ts";import{M as H}from"./movieInfo.ts";import{S as I}from"./searchResults.styles.ts";import"./styled-components.browser.esm.ts";import"./CSSTransition.ts";import"./inheritsLoose.ts";import"./moovy-white.ts";import"./loading.styles.ts";import"./index.esm.ts";import"./iconBase.ts";import"./helpers.ts";import"./hooks.ts";const K=()=>{const{search:o}=S();r.useRef(null);const f=r.useRef(null),g=N(),[m,h]=r.useState(1),[u,d]=r.useState(1),[p,M]=r.useState([]),[{data:i,error:n,fetching:l}]=v({variables:{search:o,page:m,limit:8}});r.useMemo(()=>{if(n&&console.log(n),i&&!l){const t=i.searchMovies,s=t==null?void 0:t.lastPage;s&&d(()=>s);const a=t==null?void 0:t.titles;a&&M(()=>a)}},[i,l,n,o]);const P=t=>{t.stopPropagation();const s=t.target;s.scrollHeight-s.scrollTop-2<=s.clientHeight&&m!==u&&h(a=>a+1)};return l?e(C,{}):p.length<=0?e($,{msg:"No Movies found"}):c(I,{onScroll:P,ref:f,children:[c(R,{children:[e("title",{children:`${o}: Movies`}),e("meta",{name:"description",content:`${o}: Movies`}),e("link",{rel:"canonical",href:`${x}/search/${o}/movies}`})]}),p.map(t=>e(E,{bg:t==null?void 0:t.artwork,onClick:s=>{s.stopPropagation(),location.pathname!==`/movie/${t.id}`&&g(`/movie/${t.id}`)},children:c("div",{className:"container",children:[e("div",{className:"thumbs",children:e(b,{src:t==null?void 0:t.boxart,alt:"movie"})}),e("div",{className:"info",children:e(H,{title:t})})]})}))]})};export{K as default};
